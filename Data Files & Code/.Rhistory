v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(2,	1,	29,	3,	20,	23,	19,	22,	25,	9,	16,	28,	8,	18,	5,	4,	15)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
y <- c(3,	4,	23,	2,	7,	24,	12,	30,	22,	8,	14,	18,	9,	10,	28,	26,	17)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(4,	3,	27,	7,	24,	21,	13,	10,	11,	25,	8,	23,	29,	30,	14,	2,	28)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(5,	6,	22,	25,	9,	10,	11,	13,	26,	24,	1,	27,	20,	21,	2,	15,	19)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(6,	5,	24,	12,	23,	11,	18,	29,	13,	7,	10,	1,	14,	15,	26,	9,	25)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(7,	8,	26,	4,	3, 22,	23,	11,	10,	6,	25,	15,	28,	14,	1,	19,	29)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(8,	7,	17,	13,	30,	18,	15,	16,	14,	3,	4,	12,	2,	26,	23,	20,	24)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(9,	10,	14,	11,	5,	29,	24,	23,	17,	2,	30,	21,	3,	25,	27,	6,	16)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(10,	9,	16,	15,	19,	5,	27,	4,	7,	12,	6,	14,	21,	3,	22,	29,	20)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(11,	12,	20,	9,	18,	6,	5,	7,	4,	15,	28,	17,	19,	1,	24,	16,	26)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(12,	11,	28,	6,	17,	25,	3,	18,	15,	10,	23,	8,	13,	22,	20,	30,	21)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(13,	14,	15,	8,	1,	19,	4,	5,	6,	30,	22,	26,	12,	28,	29,	21,	27)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(14,	13,	9,	19,	27,	17,	26,	15,	8,	29,	3,	10,	6,	7,	4,	18,	22)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(15,	16,	13,	10,	25,	20,	8,	14,	12,	11,	26,	7,	24,	6,	30,	5,	2)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(16,	15,	10,	1,	21,	26,	25,	8,	29,	17,	2,	20,	22,	19,	18,	11,	9)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
#How to find the numbers that are unpaired for the SS procedure
x <- c(1:30) #amount of rats in SS
y <- c(17,	18,	8,	30,	12,	14,	29,	25,	9,	16,	24,	11,	23,	27,	19,	1,	3)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(18,	17,	25,	28,	11,	8,	6,	12,	23,	22,	27,	3,	26,	2,	16,	14,	30)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(19,	20,	21,	14,	10,	13,	2,	26,	27,	28,	29,	25,	11,	16,	17,	7,	5)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(20,	19,	11,	22,	2,	15,	30,	28,	1,	23,	21,	16,	5,	24,	12,	8,	10)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(21,	22,	19,	29,	16,	4,	28,	1, 24,	27,	20,	9,	10,	5,	25,	13,	12)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(22,	21,	5,	20,	26,	7,	1,	2,	3,	18,	13,	29,	16,	12,	10,	23,	14)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(23,	24,	3,	27,	6,	2,	7,	9,	18,	20,	12,	4,	17,	29,	8,	22,	1)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(24,	23,	6,	26,	4,	3,	9,	27,	21,	5,	17,	30,	15,	20,	11,	28,	8)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
y <- c(25,	26,	18,	5,	15,	12,	16,	17,	2,	4,	7,	19,	30,	9,	21,	27,	7)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(26,	25,	7,	24,	22,	16,	14,	19,	5,	1,	15,	13,	18,	8,	6,	3,	11)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(27,	28,	4,	23,	14,	30,	10,	24,	19,	21,	18,	5,	1,	17,	9,	25,	13)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(28,	27,	12,	18,	29,	1,	21,	20,	30,	19,	11,	2,	7,	13,	3,	24,	4)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(29,	30,	2,	21,	28,	9,	17,	6,	16,	14,	19,	22,	4,	23,	13,	10,	7)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(30,	29,	1,	17,	8,	27,	20,	3,	28,	13,	9,	24,	25,	4,	15,	12,	18,	29)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:30) #amount of rats in SS
y <- c(25,	26,	18,	5,	15,	12,	16,	17,	2,	4,	7,	19,	30,	9,	21,	27,	6)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(1,	2,	4,	16,	13,	28,	22,	21,	20,	26,	5,	6,	27,	11,	15,	12,	23)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(2,	1,	27,	3,	20,	23,	19,	22,	25,	14,	16,	28,	8,	18,	5,	4,	15)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(3,	4,	23,	2,	7,	24,	12,	6,	22,	8,	14,	18,	9,	10,	28,	26,	17)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(4,	3,	1,	7,	24,	21,	13,	10,	11,	25,	8,	23,	5,	6,	14,	2,	28)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(5,	6,	22,	25,	9,	10,	11,	13,	26,	24,	1,	27,	4,	21,	2,	15,	19)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(6,	5,	24,	12,	23,	11,	18,	3,	13,	7,	10,	1,	14,	4,	26,	9,	25)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(7,	8,	26,	4,	3,	27,	23,	11,	10,	6,	25,	15,	28,	14,	13,	19,	18)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
x <- c(1:28) #amount of rats in SS
y <- c(8,	7,	17,	13,	28,	18,	15,	16,	14,	3,	4,	12,	2,	26,	23,	20,	24)
z <- c(x,y)
z
#removes duplicates
keep_singles <- function(v){
v[!(v %in% v[duplicated(v)])]
}
keep_singles(z)
sample(1:40, 16, replace=FALSE)
sample(1:40, 16, replace=FALSE)
sample(1:40, 16, replace=FALSE)
sample(1:40, 17, replace=FALSE)
sample(1:40, 16, replace=FALSE)
sample(1:40, 16, replace=FALSE)
x <- c(1:26) #amount of rats in SS
y <- c(3,	4,	11,	26,	12,	20,	22,	19,	7,	18,	9,	10,	13,	2,	17,	25,	5,	4)
z <- c(x,y)
z
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(1:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(18:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(19:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(21:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(21:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(21:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(23:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(25:40, 16, replace=FALSE)
#Rcode to generate random numbers
sample(27:40, 13, replace=FALSE)
#Rcode to generate random numbers
sample(27:40, 13, replace=FALSE)
#Rcode to generate random numbers
sample(1:20, 20, replace=FALSE)
#start from 15.7.2 tomorrow
?lm()
lm(qsec ~ hp,mtcars)
#summary of linear regression model
summary(lm(qsec~hp,mtcars))
#Creating linear model
model <- lm(qsec ~ hp,mtcars)
#using y = mx + b to determine y-axis values from linear model
yvals <-model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
#Plot
plt <- (mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
#Plot
plt <- ggplot(mtcars, aes(x=hp,y=qsec)) #import dataset into ggplot2
library(ggplot2)
#Plot
plt <- ggplot(mtcars, aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color= 'red') #plot scatter and linear model
#Multiple linear regression
lm(qsec ~ mpg + disp + drat + wt + hp,data = mtcars) #generate multiple lines
#summarize multiple regression
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data = mtcars))
#Chi-squared test
?chisq.test()
#Generate contingency table
table(mpg$class, mpg$year)
#Generate contingency table
tbl <- table(mpg$class, mpg$year)
#compare categorical distributions
chisq.test(tbl)
#Generate contingency table
tbl <- table(mpg$class, mpg$year)
#compare categorical distributions
chisq.test(tbl)
#Import dependencies
library(ggplot2)
source("~/Desktop/Data-Analytics-Boot-Camp/Machine Learning/R/MechaCar_Statistical_Analysis/MechaCar-Challenge-Script.R")
library(dplyr)
#Importing file
MechaCar_df <- read.csv('MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv('MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
ls
getwd
?getwd()
dir <- getwd()
print(dir)
dir <- getwd()
print(dir)
#Importing file
MechaCar_df <- read.csv(file = 'MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
?setwd()
dir <- setwd('C:\Users\Owner\Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis')
dir <- setwd('Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis')
dir <- setwd('/Users/Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis')
dir <- setwd('/Users/Desktop/Data-Analytics-Boot-Camp/Machine Learning/R/MechaCar_Statistical_Analysis')
print(getwd())
#Importing file
MechaCar_df <- read.csv(file = 'C:\Users\Owner\Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis\MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv(file = '\Users\Owner\Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis\MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv(file = 'Users\Owner\Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis\MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv(file = 'Desktop\Data-Analytics-Boot-Camp\Machine Learning\R\MechaCar_Statistical_Analysis\MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv(file = 'MechaCar_mpg.csv', stringsAsFactors = F, check.names = F)
#Importing file
MechaCar_df <- read.csv(file = "MechaCar_mpg.csv", stringsAsFactors = F, check.names = F)
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F) #import used car dataset
setwd('/Owner/Desktop')
setwd("~/Desktop/Data-Analytics-Boot-Camp/Machine Learning/R/MechaCar_Statistical_Analysis")
#Importing file
MechaCar_df <- read.csv(file = "MechaCar_mpg.csv", stringsAsFactors = F, check.names = F)
#Preforming linear regression
MechaCar_lm <- lm(data = MechaCar_df, mpg ~ vehicle_length + vehicle_weight )
summary(MechaCar_lm)
#Preforming linear regression
MechaCar_lm <- lm(data = MechaCar_df, mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
#Determining p-value
summary(MechaCar_lm)
## Importing file
SuspensionCoil_df <- read.csv(file = "Suspension_Coil.csv", stringsAsFactors = F, check.names = F)
## Create summary
summarize(SuspensionCoil_df)
## Create summary
total_summary <- suspension_data %>%
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
## Create summary
total_summary <- SuspensionCoil_df %>%
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI))
View(total_summary)
lot_summary <- SuspensionCoil_df %>% group_by(SuspensionCoil_df$Manufacturing_Lot) %>%
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(lot_summary)
?t.test()
# Overall T-test
t.test(SuspensionCoil_df)
# Overall T-test
t.test(x = SuspensionCoil_df, mu = 1500)
# Overall T-test
t.test(x = SuspensionCoil_df$PSI, mu = 1500)
?subset()
View(SuspensionCoil_df)
View(SuspensionCoil_df)
# Lot 1 T-test
t.test(subset(SuspensionCoil_df$Manufacturing_Lot == 'Lot 1')$PSI, mu = 1500)
# Lot 1 T-test
t.test(subset(SuspensionCoil_df$Manufacturing_Lot == 'Lot 1'),$PSI, mu = 1500)
# Lot 1 T-test
t.test(subset(SuspensionCoil_df, Manufacturing_Lot == 'Lot 1')$PSI, mu = 1500)
# Lot 1 T-test
t.test(subset(SuspensionCoil_df, Manufacturing_Lot == 'Lot1')$PSI, mu = 1500)
View(lot_summary)
# Overall T-test
t.test(x = SuspensionCoil_df$PSI, mu = 1500)
# Lot 1 T-test
t.test(subset(SuspensionCoil_df, Manufacturing_Lot == 'Lot1')$PSI, mu = 1500)
# Lot 2 T-test
t.test(subset(SuspensionCoil_df, Manufacturing_Lot == 'Lot2')$PSI, mu = 1500)
# Lot 3 T-test
t.test(subset(SuspensionCoil_df, Manufacturing_Lot == 'Lot3')$PSI, mu = 1500)
